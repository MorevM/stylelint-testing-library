import{_ as a,c as e,ae as t,o as i}from"./chunks/framework.OCOI9reC.js";const u=JSON.parse('{"title":"createTestRule","description":"","frontmatter":{},"headers":[],"relativePath":"api/create-test-rule.md","filePath":"api/create-test-rule.md"}'),n={name:"api/create-test-rule.md"};function p(l,s,c,o,r,h){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="createtestrule" tabindex="-1"><code>createTestRule</code> <a class="header-anchor" href="#createtestrule" aria-label="Permalink to &quot;\`createTestRule\`&quot;">​</a></h1><p>This is a function that allows to create sets of tests bound to a specific rule. <br> You should always pass <code>ruleName</code> into it, and you can also configure some useful defaults or overwrite those described in <a href="/stylelint-testing-library/api/create-test-utils.html"><code>createTestUtils</code></a> for a particular rule.</p><h2 id="minimal-use-case" tabindex="-1">Minimal use case <a class="header-anchor" href="#minimal-use-case" aria-label="Permalink to &quot;Minimal use case&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">Note</p><p>It is assumed that you have declared the <code>createTestRule</code> function globally as specified in the <code>Guide</code> section of the documentation and the <code>plugins</code> key is present within <code>createTestUtils</code>.</p><p><code>plugins</code> is a required property <strong>only if you have not specified it in <code>createTestUtils</code></strong>.</p></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { yourRule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./your-rule.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ruleName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yourRule;</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> testRule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ruleName });</span><span class="space"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><p>You can always see the actual options in the source code <a href="https://github.com/morevm/stylelint-testing-library/src/types/create-test-rule-schema.ts" target="_blank" rel="noreferrer">here</a>.</p><h3 id="rulename" tabindex="-1"><code>ruleName</code> <a class="header-anchor" href="#rulename" aria-label="Permalink to &quot;\`ruleName\`&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">Info</p><p>This is the only required option <em>(if you have specified <code>plugins</code> in <code>createTestUtils</code>)</em>. <br> All others are optional, but can improve your DX.</p></div><p>The name of the rule that is being tested.</p><p>Used for output in the console, and for binding the <a href="/stylelint-testing-library/api/test-rule.html#config"><code>config</code> property of the <code>testRule</code> function</a> to a rule from the <code>plugins</code> list.</p><h3 id="plugins" tabindex="-1"><code>plugins</code> <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;\`plugins\`&quot;">​</a></h3><p>The same option as described in <a href="/stylelint-testing-library/api/create-test-utils.html#plugins"><code>createTestUtils &gt; Options &gt; plugins</code></a> but takes precedence over it if specified, allowing to overwrite the defaults for a particular rule.</p><p><strong>Required</strong> if <code>plugins</code> is not specified when declaring <code>createTestUtils</code>.</p><details class="details custom-block"><summary>Show original description</summary><p>Maps to <a href="https://stylelint.io/user-guide/configure/#plugins" target="_blank" rel="noreferrer">Stylelint&#39;s <code>plugins</code></a> configuration property, has the same signature. <br> Expected either the path to the JS file that provides your rule, or its contents, or an array of such elements in the case you are testing a plugin pack.</p></details><h3 id="extrarules" tabindex="-1"><code>extraRules</code> <a class="header-anchor" href="#extrarules" aria-label="Permalink to &quot;\`extraRules\`&quot;">​</a></h3><p>The same option as described in <a href="/stylelint-testing-library/api/create-test-utils.html#extrarules"><code>createTestUtils &gt; Options &gt; extraRules</code></a> but, if specified, appended to these rules.</p><details class="details custom-block"><summary>Show original description</summary><p>Object in form compatible with <a href="https://stylelint.io/user-guide/configure/#rules" target="_blank" rel="noreferrer">Stylelint&#39;s <code>rules</code> property</a>, that allows to run <code>stylelint</code> with extra rules in addition to the one being tested.</p></details><h3 id="customsyntax" tabindex="-1"><code>customSyntax</code> <a class="header-anchor" href="#customsyntax" aria-label="Permalink to &quot;\`customSyntax\`&quot;">​</a></h3><p>The same option as described in <a href="/stylelint-testing-library/api/create-test-utils.html#customsyntax"><code>createTestUtils &gt; Options &gt; customSyntax</code></a> but takes precedence over it if specified, allowing to overwrite the defaults for a particular rule.</p><details class="details custom-block"><summary>Show original description</summary><p>Maps to <a href="https://stylelint.io/user-guide/configure/#customsyntax" target="_blank" rel="noreferrer">Stylelint&#39;s <code>customSyntax</code></a> configuration property, has the same signature.</p></details><h3 id="autostripindent" tabindex="-1"><code>autoStripIndent</code> <a class="header-anchor" href="#autostripindent" aria-label="Permalink to &quot;\`autoStripIndent\`&quot;">​</a></h3><p>The same option as described in <a href="/stylelint-testing-library/api/create-test-utils.html#autostripindent"><code>createTestUtils &gt; Options &gt; autoStripIndent</code></a> but takes precedence over it if specified, allowing to overwrite the defaults for a particular rule.</p><details class="details custom-block"><summary>Show original description</summary><p>Controls whether indentation should be automatically stripped out of code blocks.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span><span class="space"> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoStripIndent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><details class="details custom-block"><summary>Um, why?</summary><p>It can be quite tedious to calculate error positions when testing complex multi-line rules. <br> Let&#39;s pretend we have the following sample code and we expect to see an error highlighting on the <code>.another-component</code> selector:</p><div class="highlight-spaces-inside"><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Side-effect within \`@media\`-query on the root level&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.the-component {}</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.another-component {}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>You would say that the error should start on line <code>4</code> and column <code>3</code>, wouldn&#39;t you? <br> But in fact, for this particular code block, the error will start on line <code>5</code> and column <code>9</code>!</p><p>This is because the input is a string that contains all linebreaks and indentation:</p><div class="highlight-spaces-inside"><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>.the-component {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>.another-component {}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>\`</span></span></code></pre></div></div><p>Not very similar to how our CSS usually looks like. <br> Imagine you are designing a rule that interacts with indentation...</p><p>With the <code>autoStripIndent</code> option enabled, all code blocks automatically remove the start/end spaces as well as the extra indentation, so the string becomes exactly what we would see in the CSS file:</p><div class="highlight-spaces-inside"><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.the-component {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>.another-component {}</span></span>
<span class="line"><span>}</span></span></code></pre></div></div></details></details>`,24)]))}const k=a(n,[["render",p]]);export{u as __pageData,k as default};
