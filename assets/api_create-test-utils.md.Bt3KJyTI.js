import{_ as a,c as i,ae as n,o as p}from"./chunks/framework.OCOI9reC.js";const o=JSON.parse('{"title":"createTestUtils","description":"","frontmatter":{},"headers":[],"relativePath":"api/create-test-utils.md","filePath":"api/create-test-utils.md"}'),e={name:"api/create-test-utils.md"};function t(l,s,h,c,k,r){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="createtestutils" tabindex="-1"><code>createTestUtils</code> <a class="header-anchor" href="#createtestutils" aria-label="Permalink to &quot;\`createTestUtils\`&quot;">​</a></h1><p>This is the main function that provides access to other testing functions (<code>createTestRule</code> and <code>createTestRuleConfig</code>) bound to your testing platform.</p><p>Here you can configure some useful defaults described below.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><p>You can always see the actual options in the source code <a href="https://github.com/morevm/stylelint-testing-library/tree/master/src/types/create-test-utils-schema.ts" target="_blank" rel="noreferrer">here</a>.</p><h3 id="testingfunctions" tabindex="-1"><code>testingFunctions</code> <a class="header-anchor" href="#testingfunctions" aria-label="Permalink to &quot;\`testingFunctions\`&quot;">​</a></h3><p>Testing functions provided by your test platform, if you want to be explicit. <br> This is also an example of recommended use case.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GOzIf" id="tab-Rq_tGVJ" checked><label data-title="vitest" for="tab-Rq_tGVJ">vitest</label><input type="radio" name="group-GOzIf" id="tab-Rfvwfub"><label data-title="jest" for="tab-Rfvwfub">jest</label><input type="radio" name="group-GOzIf" id="tab-kagZZhi"><label data-title="node:test" for="tab-kagZZhi">node:test</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { assert, describe, expect, it } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testRuleConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFunctions: { assert, describe, expect, it },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { describe, expect, it } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@jest/globals&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testRuleConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFunctions: { assert, describe, expect, it },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assert </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:assert/strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { describe, it } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testRuleConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFunctions: { assert, describe, it },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">Info</p><p>Passing functions for testing is optional. <br> If your test platform injects them into the global scope, the module will pick them on its own.</p></div><hr><h3 id="plugins" tabindex="-1"><code>plugins</code> <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;\`plugins\`&quot;">​</a></h3><p>Maps to <a href="https://stylelint.io/user-guide/configure/#plugins" target="_blank" rel="noreferrer">Stylelint&#39;s <code>plugins</code></a> configuration property, has the same signature. <br> Expected either the path to the JS file that provides your rule, or its contents, or an array of such elements in the case you are testing a plugin pack.</p><p>Minimal example:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pvYB-" id="tab-0r-jT5x" checked><label data-title="src/index.js" for="tab-0r-jT5x">src/index.js</label><input type="radio" name="group-pvYB-" id="tab-AdQ3xFC"><label data-title="vitest.config.js" for="tab-AdQ3xFC">vitest.config.js</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stylelint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;stylelint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fooRule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./rules/foo-rule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { barRule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./rules/bar-rule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stylelint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scope/foo-rule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fooRule),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stylelint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scope/bar-rule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, barRule),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { assert, describe, expect, it } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span class="space"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testRuleConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFunctions: { assert, describe, expect, it },</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins,</span><span class="space"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h3 id="extrarules" tabindex="-1"><code>extraRules</code> <a class="header-anchor" href="#extrarules" aria-label="Permalink to &quot;\`extraRules\`&quot;">​</a></h3><p>Object in form compatible with <a href="https://stylelint.io/user-guide/configure/#rules" target="_blank" rel="noreferrer">Stylelint&#39;s <code>rules</code> property</a>, that allows to run <code>stylelint</code> with extra rules in addition to the one being tested.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span><span class="space"> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExtraRules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p>It is a good practice to test a rule in isolation from all others, but in edge cases you may want to test how rules work together - this setting allows you to do that.</p><h3 id="customsyntax" tabindex="-1"><code>customSyntax</code> <a class="header-anchor" href="#customsyntax" aria-label="Permalink to &quot;\`customSyntax\`&quot;">​</a></h3><p>Maps to <a href="https://stylelint.io/user-guide/configure/#customsyntax" target="_blank" rel="noreferrer">Stylelint&#39;s <code>customSyntax</code></a> configuration property, has the same signature.</p><p>Can be configured for separate groups of tests, but if your plugin works exclusively with a single syntax (e.g. SCSS), it may make sense to specify a parser here to reduce the amount of boilerplate code in the test files.</p><p>Example:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-_yvCA" id="tab-842FXw4" checked><label data-title="src/index.js" for="tab-842FXw4">src/index.js</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { assert, describe, expect, it } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTestRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testRuleConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFunctions: { assert, describe, expect, it },</span></span>
<span class="line highlighted"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customSyntax:</span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h3 id="testgroupwithoutdescriptionappearance" tabindex="-1"><code>testGroupWithoutDescriptionAppearance</code> <a class="header-anchor" href="#testgroupwithoutdescriptionappearance" aria-label="Permalink to &quot;\`testGroupWithoutDescriptionAppearance\`&quot;">​</a></h3><p>The option controls how test groups are displayed in the console output if they do not have a description. It is <strong>recommended</strong> to always use a description for a group of tests - it allows to find the right set faster.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span><span class="space"> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group-index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testGroupWithoutDescriptionAppearance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;group-index&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;config&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;line-in-file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>We have three options:</p><ul><li>Use the group index <em>(default)</em>;</li><li>Use the stringified <code>config</code> property passed to the <a href="/stylelint-testing-library/api/test-rule.html"><code>testRule</code></a> utility;</li><li>Line number in the file where the <a href="/stylelint-testing-library/api/test-rule.html"><code>testRule</code></a> call is located <em>(experimental)</em>.</li></ul><p>The output of all of them is shown below:</p><details class="details custom-block"><summary><code>group-index</code> (default)</summary><p>A clean, minimalistic look that helps to quickly locate the right group of tests (especially when using folding feature in the editor).</p><p><strong>Note</strong>: this is a sequence number, not an index in the programming sense, so it starts with <code>1</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div></details><details class="details custom-block"><summary><code>config</code></summary><p>Using configuration as a hint seems logical, but practice shows that it is not very useful due to the fact that output is almost always not the same as specified in the file, meaning that you can not just select it and search the file - and you have to count the index, or extract individual properties from the config and search for them - this is inconvenient.</p><p>The option exists to ensure that the project can be a drop-in replacement for an existing solutions for testing Stylelint plugins that did not provide the ability to set a description for a test group.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ignore:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div></details><details class="details custom-block"><summary><code>error-line</code> <em>(experimental)</em></summary><p>Using the <code>group-index</code> property is usually more convenient than <code>config</code>, but for existing codebases with a large number of tests it can still be quite painful and require routine counting work.</p><p>This option allows you to use the line number in the file where the <code>testRule</code> call is located as a description of the test script group.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-upjcp" id="tab-0Q_YV-y" checked><label data-title="Test file contents" for="tab-0Q_YV-y">Test file contents</label><input type="radio" name="group-upjcp" id="tab-L2dk_Bl"><label data-title="Console output" for="tab-L2dk_Bl">Console output</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accept: [</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accept: [</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line has-focus"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (4)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div></div></div></details><h3 id="testcasewithoutdescriptionappearance" tabindex="-1"><code>testCaseWithoutDescriptionAppearance</code> <a class="header-anchor" href="#testcasewithoutdescriptionappearance" aria-label="Permalink to &quot;\`testCaseWithoutDescriptionAppearance\`&quot;">​</a></h3><p>The option controls how test cases are displayed in the console output if they do not have a description. It is <strong>recommended</strong> to always use a description for a test cases - it allows to find the right one faster.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span><span class="space"> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">case-index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestCaseWithoutDescriptionAppearance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;case-index&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>We have two options: use the test index or its code, the output of both is shown below:</p><details class="details custom-block"><summary><code>case-index</code> (default)</summary><p>A clean, minimalistic look that helps to quickly locate the right test case.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Accept</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №1</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Accept</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №2</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Reject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №1</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Reject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №2</span></span></code></pre></div></details><details class="details custom-block"><summary><code>code</code></summary><p>Using the code as a hint seems logical, but practice shows that it is not very useful due to the fact that output is usually pretty verbose and not the same as written in the file (in case of multi-line code), meaning that you can not just select the code and search the file - and you have to count the index, or extract individual entities from the code and search for them - this is inconvenient.</p><p>The option exists to ensure that the project can be a drop-in replacement for an existing solutions for testing Stylelint plugins that did not provide the ability to set a description for a test cases.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {rule-name}:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> №1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.the-component {}&#39;</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.the-component {\\n\\t&amp;__element {}\\n}&#39;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line has-focus"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.the-component {\\n\\t$b: #{&amp;};\\n\\n\\t#{$b} {}\\n}&#39;</span></span></code></pre></div></details><h3 id="autostripindent" tabindex="-1"><code>autoStripIndent</code> <a class="header-anchor" href="#autostripindent" aria-label="Permalink to &quot;\`autoStripIndent\`&quot;">​</a></h3><p>Controls whether indentation should be automatically stripped out of code blocks.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span><span class="space"> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false</span></span>
<span class="line"><span class="space"> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoStripIndent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><details class="details custom-block"><summary>Um, why?</summary><p>It can be quite tedious to calculate error positions when testing complex multi-line rules. <br> Let&#39;s pretend we have the following sample code and we expect to see an error highlighting on the <code>.another-component</code> selector:</p><div class="highlight-spaces-inside"><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Side-effect within \`@media\`-query on the root level&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.the-component {}</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.another-component {}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>You would say that the error should start on line <code>4</code> and column <code>3</code>, wouldn&#39;t you? <br> But in fact, for this particular code block, the error will start on line <code>5</code> and column <code>9</code>!</p><p>This is because the input is a string that contains all linebreaks and indentation:</p><div class="highlight-spaces-inside"><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>.the-component {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>.another-component {}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>\`</span></span></code></pre></div></div><p>Not very similar to how our CSS usually looks like. <br> Imagine you are designing a rule that interacts with indentation...</p><p>With the <code>autoStripIndent</code> option enabled, all code blocks automatically remove the start/end spaces as well as the extra indentation, so the string becomes exactly what we would see in the CSS file:</p><div class="highlight-spaces-inside"><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.the-component {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@media (max-width: 320px) {</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span>.another-component {}</span></span>
<span class="line"><span>}</span></span></code></pre></div></div></details><div class="info custom-block"><p class="custom-block-title">Note</p><p>You can always redefine this global setting for a group of tests or a single test.</p></div>`,43)]))}const g=a(e,[["render",t]]);export{o as __pageData,g as default};
